#!/bin/sh
# A script-only build utility like autotools
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http:##www.apache.org#licenses#LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Copyright (C) 2022-present, TBOOX Open Source Group.
#
# @author      ruki
#

#-----------------------------------------------------------------------------
# some constants
#
xmake_sh_projectdir=$(X= cd -- "$(dirname -- "$0")" && pwd -P)
xmake_sh_buildir="${xmake_sh_projectdir}/build"
xmake_sh_version="1.0"
xmake_sh_verbose=false
xmake_sh_copyright="Copyright (C) 2022-present Ruki Wang, tboox.org, xmake.io."

#-----------------------------------------------------------------------------
# some helper functions
#
_die() {
    echo "$@" 1>&2 ; exit 1
}

_toupper()
{
    echo "$1" | tr '[a-z]' '[A-Z]'
}

_tolower()
{
    echo "$1" | tr '[A-Z]' '[a-z]'
}

_vprint()
{
    if "${xmake_sh_verbose}"; then
        echo "$@"
    fi
}

# duplicate characters
# e.g. _dupch 10 "." => ...........
_dupch()
{
    local count=${1}
    local ch=${2}
    printf %${count}s | tr " " "${ch}"
}

# is enabled? true, yes, y
_is_enabled()
{
    local value=${1}
    if test "x${value}" = "xtrue"; then
        return 0
    elif test "x${value}" = "xyes"; then
        return 0
    elif test "x${value}" = "xy"; then
        return 0
    fi
    return 1
}

# find file in the given directory
# e.g. _find . xmake.sh
_find() {
    local dir=${1}
    local name=${2}
    local depth=${3}
    if is_host "macosx"; then
        echo `find ${dir} -depth ${depth} -name "${name}"`
    else
        echo `find ${dir} -maxdepth ${depth} -mindepth ${depth} -name "${name}"`
    fi
}

#-----------------------------------------------------------------------------
# map functions
#

# define map, @note we can not use bash/declare to define map, because sh does not support it.
#
# _map "options"
# _map_set "options" "key1" "value1"
# _map_set "options" "key2" "value2"
# _map_set "options" "key2" "value3"
# _map_set "options" "key3" "value3"
# _map_set "options" "key4" "__empty__"
# _map_set "options" "key4" "__empty__"
# _count=`_map_count "options"`
# _keys=`_map_keys "options"`
# echo ${_count}
# for key in ${_keys}; do
#     value=`_map_get "options" ${key}`
#     echo ${key} "->" ${value}
# done
#
# echo "------"
# _map_remove "options" "key3"
# _count=`_map_count "options"`
# _keys=`_map_keys "options"`
# echo ${_count}
# for key in ${_keys}; do
#     value=`_map_get "options" ${key}`
#     echo ${key} "->" ${value}
# done
#
_map()
{
    local name=${1}
    eval _map_${name}_count=0
    eval _map_${name}_keys=""
}

_map_count()
{
    local name=${1}
    local count=$(eval echo \$_map_${name}_count)
    echo ${count}
}

_map_get()
{
    local name=${1}
    local key=${2}
    local value=$(eval echo \$_map_${name}_value_${key})
    if test "x${value}" = "x__empty__"; then
        value=""
    fi
    echo ${value}
}

_map_has()
{
    local name=${1}
    local key=${2}
    local value=$(eval echo \$_map_${name}_value_${key})
    if test "x${value}" != "x"; then
        return 0
    fi
    return 1
}

_map_set()
{
    local name=${1}
    local key=${2}
    local value=${3}
    if ! _map_has ${name} ${key}; then
        local count=`_map_count "options"`
        eval _map_${name}_count=$((${count} + 1))
        local keys=$(eval echo \$_map_${name}_keys)
        keys="${keys} ${key}"
        eval _map_${name}_keys=\${keys}
    fi
    eval _map_${name}_value_${key}=\${value}
}

_map_remove()
{
    local name=${1}
    local key=${2}
    if _map_has ${name} ${key}; then
        local count=`_map_count "options"`
        eval _map_${name}_count=$((${count} - 1))
        eval _map_${name}_value_${key}=""
        local keys=$(eval echo \$_map_${name}_keys)
        local keys_new=""
        for k in ${keys}; do
            if test "x${k}" != "x${key}"; then
                keys_new="${keys_new} ${k}"
            fi
        done
        eval _map_${name}_keys=\${keys_new}
    fi
}

_map_keys()
{
    local name=${1}
    local keys=$(eval echo \$_map_${name}_keys)
    echo ${keys}
}

#-----------------------------------------------------------------------------
# detect default environments
#

# detect hosts
os_host=`uname`
os_host=`_tolower ${os_host}`
if echo "${os_host}" | grep cygwin >/dev/null 2>&1; then
    os_host="cygwin"
fi
if echo "${os_host}" | grep msys >/dev/null 2>&1; then
    os_host="msys"
fi
if echo "${os_host}" | grep darwin >/dev/null 2>&1; then
    os_host="macosx"
fi
if echo "${os_host}" | grep linux >/dev/null 2>&1; then
    os_host="linux"
fi
if echo "${os_host}" | grep freebsd >/dev/null 2>&1; then
    os_host="freebsd"
fi
if echo "${os_host}" | grep bsd >/dev/null 2>&1; then
    os_host="bsd"
fi

# determining host
# e.g.
# if is_host "linux" "macosx"; then
#     ...
# fi
is_host()
{
    for host in $@; do
        if test "x${os_host}" = "x${host}"; then
            return 0
        fi
    done
    return 1
}

# detect host architecture
os_arch=`uname -m | tr '[A-Z]' '[a-z]'`

# set the default target platform and architecture
_target_plat_default=${os_host}
_target_arch_default=${os_arch}

# determining target platform
# e.g.
# if is_plat "linux" "macosx"; then
#     ...
# fi
is_plat()
{
    for plat in $@; do
        if test "x${_target_plat}" = "x${plat}"; then
            return 0
        fi
    done
    return 1
}

# determining target architecture
# e.g.
# if is_arch "x86_64" "i386"; then
#     ...
# fi
is_arch()
{
    for arch in $@; do
        if test "x${_target_arch}" = "x${arch}"; then
            return 0
        fi
    done
    return 1
}

# determining target toolchain
# e.g.
# if is_toolchain "clang"; then
#     ...
# fi
is_toolchain()
{
    for toolchain in $@; do
        if test "x${_target_toolchain}" = "x${toolchain}"; then
            return 0
        fi
    done
    return 1
}

#-----------------------------------------------------------------------------
# project configuration apis
#

# include the given xmake.sh file or directory
# e.g. includes "src" "tests"
includes()
{
    for path in $@; do
        if test -f "${path}"; then
            xmake_sh_scriptdir=$(dirname -- "${path}")
            . "${path}"
        else
            local xmake_sh_scriptdir_cur=${xmake_sh_scriptdir}
            if test "x${xmake_sh_scriptdir}" != "x"; then
                xmake_sh_scriptdir="${xmake_sh_scriptdir_cur}/${path}"
                . "${xmake_sh_scriptdir}/xmake.sh"
            else
                . "${xmake_sh_projectdir}/${path}/xmake.sh"
            fi
            xmake_sh_scriptdir=${xmake_sh_scriptdir_cur}
        fi
    done
}

#-----------------------------------------------------------------------------
# option configuration apis
#

# define option
option()
{
    if ! ${_loading_options}; then
        return
    fi
    local name=${1}
    local description=${2}
    local default=${3}
    _xmake_sh_options="${_xmake_sh_options} ${name}"
    _map_set "options" "${name}_name" "${name}"
    _map_set "options" "${name}_description" "${description}"
    _map_set "options" "${name}_default" "${default}"
    return 0
}
_map "options"

# has the given option?
_has_option()
{
    local name=${1}
    if _map_has "options" "${name}_name"; then
        return 0
    fi
    return 1
}

# get the given option item
_get_option_item()
{
    local name=${1}
    local key=${2}
    local value=`_map_get "options" "${name}_${key}"`
    echo ${value}
}

# set the given option item
_set_option_item()
{
    local name=${1}
    local key=${2}
    local value=${3}
    if test "x${name}" != "x"; then
        _map_set "options" "${name}_${key}" "${value}"
    else
        _die "please set option in the option scope!"
    fi
}

# get the give option value
_get_option_value()
{
    local name=${1}
    local value=`_get_option_item "${name}" "value"`
    if test "x${value}" = "x"; then
        value=`_get_option_item "${name}" "default"`
    fi
    echo ${value}
}

# set the give option value
_set_option_value()
{
    local name=${1}
    local value=${2}
    _set_option_item "${name}" "value" "${value}"
}

# is config for option
is_config()
{
    if ! ${_loading_targets}; then
        return 1
    fi
    local name=${1}
    local value=${2}
    local value_cur=`_get_option_value "${name}"`
    if test "x${value_cur}" = "x${value}"; then
        return 0
    fi
    return 1
}

# has config for option
has_config()
{
    if ! ${_loading_targets}; then
        return 1
    fi
    local name=${1}
    local value_cur=`_get_option_value "${name}"`
    if _is_enabled ${value_cur}; then
        return 0
    fi
    return 1
}

#-----------------------------------------------------------------------------
# target configuration apis
#

# define target
target()
{
    if ! ${_loading_targets}; then
        return
    fi
    local name=${1}
    _xmake_sh_target_current=${name}
    _xmake_sh_targets="${_xmake_sh_targets} ${name}"
    _map_set "targets" "${name}_name" "${name}"
    return 0
}
target_end()
{
    _xmake_sh_target_current=""
}
_map "targets"

# has the given target?
_has_target()
{
    local name=${1}
    if _map_has "targets" "${name}_name"; then
        return 0
    fi
    return 1
}

# get the given target item
_get_target_item()
{
    local name=${1}
    local key=${2}
    local value=`_map_get "targets" "${name}_${key}"`
    echo ${value}
}

# set the given target item
_set_target_item()
{
    local name=${1}
    local key=${2}
    local value=${3}
    if test "x${name}" != "x"; then
        _map_set "targets" "${name}_${key}" "${value}"
    else
        _die "please set target in the target scope!"
    fi
}

# add values to the given target item
_add_target_item()
{
    local name=${1}
    local key=${2}
    local value=${3}
    if test "x${name}" != "x"; then
        local values=`_map_get "targets" "${name}_${key}"`
        values="${values} ${value}"
        _map_set "targets" "${name}_${key}" "${values}"
    else
        _die "please set target in the target scope!"
    fi
}

# set kind in target
set_kind()
{
    if ! ${_loading_targets}; then
        return
    fi
    local kind=${1}
    _set_target_item "${_xmake_sh_target_current}" "kind" "${kind}"
}

# add deps in target
add_deps()
{
    if ! ${_loading_targets}; then
        return
    fi
    for dep in $@; do
        _add_target_item "${_xmake_sh_target_current}" "deps" "${dep}"
    done
}

# add files in target
add_files()
{
    if ! ${_loading_targets}; then
        return
    fi
    for file in $@; do
        if test ! -f "${file}"; then
            file="${xmake_sh_scriptdir}/${file}"
        fi
        _add_target_item "${_xmake_sh_target_current}" "files" "${file}"
    done
}

# add defines in target
add_defines()
{
    if ! ${_loading_targets}; then
        return
    fi
    for define in $@; do
        _add_target_item "${_xmake_sh_target_current}" "defines" "${define}"
    done
}

#-----------------------------------------------------------------------------
# toolchain configuration apis
#

# define toolchain
toolchain()
{
    if ! ${_loading_toolchains}; then
        return
    fi
    local name=${1}
    _xmake_sh_toolchain_current=${name}
    _xmake_sh_toolchains="${_xmake_sh_toolchains} ${name}"
    _map_set "toolchains" "${name}_name" "${name}"
    return 0
}
toolchain_end()
{
    _xmake_sh_toolchain_current=""
}
_map "toolchains"

# has the given toolchain?
_has_toolchain()
{
    local name=${1}
    if _map_has "toolchains" "${name}_name"; then
        return 0
    fi
    return 1
}

# get the given toolchain item
_get_toolchain_item()
{
    local name=${1}
    local key=${2}
    local value=`_map_get "toolchains" "${name}_${key}"`
    echo ${value}
}

# set the given toolchain item
_set_toolchain_item()
{
    local name=${1}
    local key=${2}
    local value=${3}
    if test "x${name}" != "x"; then
        _map_set "toolchains" "${name}_${key}" "${value}"
    else
        _die "please set toolchain in the toolchain scope!"
    fi
}

# get the give toolchain toolset
_get_toolchain_toolset()
{
    local name=${1}
    local kind=${2}
    local programs=`_get_toolchain_item "${name}" "toolset_${kind}" `
    echo ${programs}
}

# set the give toolchain toolset
_set_toolchain_toolset()
{
    local name=${1}
    local kind=${2}
    local programs="${3}"
    _set_toolchain_item "${name}" "toolset_${kind}" "${programs}"
}

# set toolset in toolchain
set_toolset()
{
    if ! ${_loading_toolchains}; then
        return
    fi
    local kind=${1}
    local programs="${2}"
    _set_toolchain_toolset "${_xmake_sh_toolchain_current}" "${kind}" "${programs}"
}

# clang toolchain
toolchain "clang"
    set_toolset "as" "clang"
    set_toolset "cc" "clang"
    set_toolset "cxx" "clang clang++"
    set_toolset "mm" "clang"
    set_toolset "mxx" "clang clang++"
    set_toolset "ld" "clang++ clang"
    set_toolset "sh" "clang++ clang"
    set_toolset "ar" "ar"
toolchain_end

# gcc toolchain
toolchain "gcc"
    set_toolset "as" "gcc"
    set_toolset "cc" "gcc"
    set_toolset "cxx" "gcc g++"
    set_toolset "mm" "gcc"
    set_toolset "mxx" "gcc g++"
    set_toolset "ld" "g++ gcc"
    set_toolset "sh" "g++ gcc"
    set_toolset "ar" "ar"
toolchain_end

#-----------------------------------------------------------------------------
# load options
#

# load options and toolchains
_load_options_and_toolchains()
{
    _loading_options=true
    _loading_toolchains=true
    _loading_targets=false
    local file=${xmake_sh_projectdir}/xmake.sh
    if test -f "${file}"; then
        includes "${file}"
    else
        # include all xmake.sh files in next sub-directories
        local files=`find ${xmake_sh_projectdir} -maxdepth 2 -mindepth 2 -name "xmake.sh"`
        for file in ${files}; do
            includes "${file}"
        done
    fi
}
_load_options_and_toolchains

# show option usage
_show_options_usage()
{
    for name in ${_xmake_sh_options}; do
        local description=`_get_option_item "${name}" "description"`
        local default=`_get_option_item "${name}" "default"`
        local head="--${name}=`_toupper ${name}`"
        local headsize=${#head}
        local tail="${description}"
        if test "x${default}" != "x"; then
            local defval=${default}
            if test "x${defval}" = "xtrue"; then
                defval="yes"
            elif test "x${defval}" = "xfalse"; then
                defval="no"
            fi
            tail="${tail} (default: ${defval})"
        fi
        local width=24
        local padding_width=$((${width} - ${headsize}))
        local padding=`_dupch ${padding_width} " "`
        echo "  ${head}${padding}${tail}"
    done
}

# show configure usage
_show_usage()
{
echo '
Usage: '"$0"' [<options>...]
Options: [defaults in brackets after descriptions]
Common options:
  --help                  Print this message.
  --version               Only print version information.
  --verbose               Display more information.
  --plat=PLAT             Compile for the given platform. (default: '"${_target_plat_default}"')
                              - msys
                              - cross
                              - bsd
                              - mingw
                              - macosx
                              - linux
  --arch=ARCH             Compile for the given architecture. (default: '"${_target_arch_default}"')
                              - msys: i386 x86_64
                              - cross: i386 x86_64 arm arm64 mips mips64 riscv riscv64 s390x ppc ppc64 sh4
                              - bsd: i386 x86_64
                              - mingw: i386 x86_64 arm arm64
                              - macosx: x86_64 arm64
                              - linux: i386 x86_64 armv7 armv7s arm64-v8a mips mips64 mipsel mips64el
  --toolchain=TOOLCHAIN   Set toolchain name.
                              - clang
                              - gcc

Project options:
'"`_show_options_usage`"'
'
    exit 1
}

# show xmake.sh version
_show_version()
{
    echo "xmake.sh v${xmake_sh_version}, A script-only build utility like autotools"
    echo "${xmake_sh_copyright}"
    echo '                         _               _            '
    echo "    __  ___ __  __  __ _| | ______   ___| |__         "
    echo "    \ \/ / |  \/  |/ _  | |/ / __ \ / __| '_  \       "
    echo "     >  <  | \__/ | /_| |   <  ___/_\__ \ | | |       "
    echo "    /_/\_\_|_|  |_|\__ \|_|\_\____(_)___/_| |_|       "
    echo '                                     by ruki, xmake.io'
    echo '                                                      '
    echo '   👉  Manual: https://xmake.io/#/getting_started     '
    echo '   🙏  Donate: https://xmake.io/#/sponsor             '
    echo '                                                      '
    exit 2
}

# --foo=yes => foo
_parse_argument_name()
{
    echo "${1#*--}" | sed "s/${2-=[^=]*}$//"
}

# --foo=yes => yes
_parse_argument_value()
{
    echo "$1" | sed "s/^${2-[^=]*=}//"
}

# parse input arguments
_handle_option()
{
    local name=`_parse_argument_name ${1}`
    local value=`_parse_argument_value ${1}`
    if test "x${name}" = "xhelp"; then
        _show_usage
        return 0
    elif test "x${name}" = "xversion"; then
        _show_version
        return 0
    elif test "x${name}" = "xverbose"; then
        xmake_sh_verbose=true
        return 0
    elif test "x${name}" = "xplat"; then
        _target_plat=${value}
        return 0
    elif test "x${name}" = "xarch"; then
        _target_arch=${value}
        return 0
    elif test "x${name}" = "xtoolchain"; then
        _target_toolchain=${value}
        return 0
    elif _has_option "${name}"; then
        _set_option_value "${name}" "${value}"
        return 0
    fi
    return 1
}
while test $# != 0; do
    if _handle_option ${1}; then
        shift
    else
        _die "Unknown option: $1"
    fi
done

#-----------------------------------------------------------------------------
# detect platform and toolchains
#

# check platform
_check_platform()
{
    if test "x${_target_plat}" = "x"; then
        _target_plat=${_target_plat_default}
    fi
    if test "x${_target_arch}" = "x"; then
        _target_arch=${_target_arch_default}
    fi
    echo "checking for platform ... ${_target_plat}"
    echo "checking for architecture ... ${_target_arch}"
}

# try program
_toolchain_try_program()
{
    local toolchain=${1}
    local kind=${2}
    local program=${3}
    _vprint "checking for ${program} ... ok"
    return 0
}

# try toolset
_toolchain_try_toolset()
{
    local toolchain=${1}
    local kind=${2}
    local description=${3}
    local programs=`_get_toolchain_toolset "${toolchain}" "${kind}"`
    for program in ${programs}; do
        if _toolchain_try_program "${toolchain}" "${kind}" "${program}"; then
            _set_toolchain_toolset "${toolchain}" "${kind}" "${program}"
            echo "checking for the ${description} (${kind}) ... ${program}"
            return 0
        fi
    done
    return 1
}

# try toolchain
_toolchain_try()
{
    local toolchain=${1}
    _vprint "checking for $toolchain toolchain ..."
    if _toolchain_try_toolset "${toolchain}" "cc" "c compiler" &&
       _toolchain_try_toolset "${toolchain}" "cxx" "c++ compiler" &&
       _toolchain_try_toolset "${toolchain}" "as" "assembler" &&
       _toolchain_try_toolset "${toolchain}" "mm" "objc compiler" &&
       _toolchain_try_toolset "${toolchain}" "mxx" "objc++ compiler" &&
       _toolchain_try_toolset "${toolchain}" "ld" "linker" &&
       _toolchain_try_toolset "${toolchain}" "ar" "static library archiver" &&
       _toolchain_try_toolset "${toolchain}" "sh" "shared library linker"; then
        return 0
    fi
    return 1
}
_toolchain_detect()
{
    local toolchains="${1}"
    if test "x${toolchains}" = "x"; then
        if is_plat "macosx"; then
            toolchains="clang gcc"
        else
            toolchains="gcc clang"
        fi
    fi

    if test ! -d ${xmake_sh_buildir}; then
        mkdir ${xmake_sh_buildir}
    fi

    for toolchain in ${toolchains}; do
        if _toolchain_try "$toolchain"; then
            _target_toolchain=${toolchain}
            break
        fi
    done
}

# check toolchain
_check_toolchain()
{
    # detect toolchain
    local toolchain=${_target_toolchain}
    _target_toolchain=""
    _toolchain_detect ${toolchain}

    if test "x${_target_toolchain}" != "x"; then
        echo "checking for toolchain ... ${_target_toolchain}"
    else
        echo "checking for toolchain ... no"
        _die "toolchain not found!"
    fi
}

# check all
_check_all()
{
    _check_platform
    _check_toolchain
}
_check_all

#-----------------------------------------------------------------------------
# load project targets
#

# load targets
_load_targets()
{
    _loading_options=false
    _loading_toolchains=false
    _loading_targets=true
    local file=${xmake_sh_projectdir}/xmake.sh
    if test -f "${file}"; then
        includes "${file}"
    else
        # include all xmake.sh files in next sub-directories
        local files=`_find "${xmake_sh_projectdir}" "xmake.sh" 2`
        for file in ${files}; do
            includes "${file}"
        done
    fi
}
_load_targets


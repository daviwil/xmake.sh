#!/bin/sh
# A script-only build utility like autotools
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http:##www.apache.org#licenses#LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Copyright (C) 2022-present, TBOOX Open Source Group.
#
# @author      ruki
#

# init some constants
xmake_sh_rootdir=$(X= cd -- "$(dirname -- "$0")" && pwd -P)
xmake_sh_version="1.0"
xmake_sh_copyright="Copyright (C) 2022-present Ruki Wang, tboox.org, xmake.io."
xmake_sh_host=`uname | tr '[A-Z]' '[a-z]'`
xmake_sh_arch=`uname -m | tr '[A-Z]' '[a-z]'`

_die() {
    echo "$@" 1>&2 ; exit 1
}

# include the given xmake.sh file or directory
includes()
{
    if test -z ${_loading_targets}; then
        return
    fi
    for path in $@; do
        if [ -f "${path}" ]; then
            _includes_rootdir=$(dirname -- "${path}")
            . "${path}"
        else
            local _includes_rootdir_cur=${_includes_rootdir}
            if [ "x${_includes_rootdir}" != "x" ]; then
                _includes_rootdir="${_includes_rootdir_cur}/${path}"
                . "${_includes_rootdir}/xmake.sh"
            else
                . "${xmake_sh_rootdir}/${path}/xmake.sh"
            fi
            _includes_rootdir=${_includes_rootdir_cur}
        fi
    done
}

# define option
option()
{
    if test -z ${_loading_options}; then
        return
    fi
    echo "${1}" "${2}"
}

# is config for option
is_config()
{
    if test -z ${_loading_targets}; then
        return 1
    fi
    return 0
}

# has config for option
has_config()
{
    if test -z ${_loading_targets}; then
        return 1
    fi
    return 0
}

# define target
target()
{
    if test -z ${_loading_targets}; then
        return
    fi
    echo "${1}" "${2}"
    return 0
}

# set kind in target
set_kind()
{
    if test -z ${_loading_targets}; then
        return
    fi
    echo "set kind ${1}"
}

# add deps in target
add_deps()
{
    if test -z ${_loading_targets}; then
        return
    fi
    echo "add deps ${1}"
}

# add files in target
add_files()
{
    if test -z ${_loading_targets}; then
        return
    fi
    echo "add files ${1}"
}

# add defines in target
add_defines()
{
    if test -z ${_loading_targets}; then
        return
    fi
    echo "add defines ${1}"
}

# load options
_load_options()
{
    _loading_options=true
    local file=${xmake_sh_rootdir}/xmake.sh
    if [ -f "${file}" ]; then
        . "${file}"
    else
        # include all xmake.sh files in next sub-directories
        local files=`find ${xmake_sh_rootdir} -maxdepth 2 -mindepth 2 -name "xmake.sh"`
        for file in ${files}; do
            . "${file}"
        done
    fi
    _loading_options=
}
_load_options

# show configure usage
_show_usage()
{
echo '
Usage: '"$0"' [<options>...]
Options: [defaults in brackets after descriptions]
Configuration:
  --help                  print this message
  --version               only print version information
  --verbose               display more information

Directory and file names:
  --prefix=PREFIX         install files in tree rooted at PREFIX
                          ['"${xmake_sh_default_prefix}"']
  --bindir=DIR            install binaries in PREFIX/DIR
                          ['"${xmake_sh_default_bindir}"']
'
  exit 10
}

# show xmake.sh version
_show_version()
{
    echo "xmake.sh v${xmake_sh_version}, A script-only build utility like autotools"
    echo "${xmake_sh_copyright}"
    echo ""
}

# parse input arguments
while test $# != 0; do
    case "$1" in
    --help) _show_usage ;;
    --version) _show_version ; exit 2 ;;
    --) shift; break ;;
    *) _die "Unknown option: $1" ;;
    esac
    shift
done

# load targets
_load_targets()
{
    _loading_targets=true
    local file=${xmake_sh_rootdir}/xmake.sh
    if [ -f "${file}" ]; then
        includes "${file}"
    else
        # include all xmake.sh files in next sub-directories
        local files=`find ${xmake_sh_rootdir} -maxdepth 2 -mindepth 2 -name "xmake.sh"`
        for file in ${files}; do
            includes "${file}"
        done
    fi
    _loading_targets=
}
_load_targets


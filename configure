#!/bin/sh
# A script-only build utility like autotools
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http:##www.apache.org#licenses#LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Copyright (C) 2022-present, TBOOX Open Source Group.
#
# @author      ruki
#

# init some constants
xmake_sh_projectdir=$(X= cd -- "$(dirname -- "$0")" && pwd -P)
xmake_sh_version="1.0"
xmake_sh_copyright="Copyright (C) 2022-present Ruki Wang, tboox.org, xmake.io."

_die() {
    echo "$@" 1>&2 ; exit 1
}

_toupper()
{
    echo "$1" | tr '[a-z]' '[A-Z]'
}

_tolower()
{
    echo "$1" | tr '[A-Z]' '[a-z]'
}

# duplicate characters
# e.g. _dupch 10 "." => ...........
_dupch()
{
    local count=${1}
    local ch=${2}
    printf %${count}s | tr " " "${ch}"
}

# define map
# _map "options"
# _map_set "options" "key1" "value1"
# _map_set "options" "key2" "value2"
# _map_set "options" "key2" "value3"
# _map_set "options" "key3" "value3"
# _map_set "options" "key4" "__empty__"
# _map_set "options" "key4" "__empty__"
# _count=`_map_count "options"`
# _keys=`_map_keys "options"`
# echo ${_count}
# for key in ${_keys}; do
#     value=`_map_get "options" ${key}`
#     echo ${key} "->" ${value}
# done
#
# echo "------"
# _map_remove "options" "key3"
# _count=`_map_count "options"`
# _keys=`_map_keys "options"`
# echo ${_count}
# for key in ${_keys}; do
#     value=`_map_get "options" ${key}`
#     echo ${key} "->" ${value}
# done
#
_map()
{
    local name=${1}
    eval _map_${name}_count=0
    eval _map_${name}_keys=""
}

_map_count()
{
    local name=${1}
    local count=$(eval echo \$_map_${name}_count)
    echo ${count}
}

_map_get()
{
    local name=${1}
    local key=${2}
    local value=$(eval echo \$_map_${name}_value_${key})
    if test "x${value}" = "x__empty__"; then
        value=""
    fi
    echo ${value}
}

_map_has()
{
    local name=${1}
    local key=${2}
    local value=$(eval echo \$_map_${name}_value_${key})
    if test "x${value}" != "x"; then
        return 0
    fi
    return 1
}

_map_set()
{
    local name=${1}
    local key=${2}
    local value=${3}
    if ! _map_has ${name} ${key}; then
        local count=`_map_count "options"`
        eval _map_${name}_count=$((${count} + 1))
        local keys=$(eval echo \$_map_${name}_keys)
        keys="${keys} ${key}"
        eval _map_${name}_keys=\${keys}
    fi
    eval _map_${name}_value_${key}=\${value}
}

_map_remove()
{
    local name=${1}
    local key=${2}
    if _map_has ${name} ${key}; then
        local count=`_map_count "options"`
        eval _map_${name}_count=$((${count} - 1))
        eval _map_${name}_value_${key}=""
        local keys=$(eval echo \$_map_${name}_keys)
        local keys_new=""
        for k in ${keys}; do
            if test "x${k}" != "x${key}"; then
                keys_new="${keys_new} ${k}"
            fi
        done
        eval _map_${name}_keys=\${keys_new}
    fi
}

_map_keys()
{
    local name=${1}
    local keys=$(eval echo \$_map_${name}_keys)
    echo ${keys}
}

# detect hosts
os_host=`uname`
os_host=`_tolower ${os_host}`
if echo "${os_host}" | grep cygwin >/dev/null 2>&1; then
    os_host="cygwin"
fi
if echo "${os_host}" | grep msys >/dev/null 2>&1; then
    os_host="msys"
fi
if echo "${os_host}" | grep darwin >/dev/null 2>&1; then
    os_host="macosx"
fi
if echo "${os_host}" | grep linux >/dev/null 2>&1; then
    os_host="linux"
fi
if echo "${os_host}" | grep freebsd >/dev/null 2>&1; then
    os_host="freebsd"
fi
if echo "${os_host}" | grep bsd >/dev/null 2>&1; then
    os_host="bsd"
fi

# determining host
# e.g.
# if is_host "linux" "macosx"; then
#     ...
# fi
is_host()
{
    for host in $@; do
        if test "x${os_host}" = "x${host}"; then
            return 0
        fi
    done
    return 1
}

# detect host architecture
os_arch=`uname -m | tr '[A-Z]' '[a-z]'`

# include the given xmake.sh file or directory
# e.g. includes "src" "tests"
includes()
{
    for path in $@; do
        if test -f "${path}"; then
            xmake_sh_scriptdir=$(dirname -- "${path}")
            . "${path}"
        else
            local xmake_sh_scriptdir_cur=${xmake_sh_scriptdir}
            if test "x${xmake_sh_scriptdir}" != "x"; then
                xmake_sh_scriptdir="${xmake_sh_scriptdir_cur}/${path}"
                . "${xmake_sh_scriptdir}/xmake.sh"
            else
                . "${xmake_sh_projectdir}/${path}/xmake.sh"
            fi
            xmake_sh_scriptdir=${xmake_sh_scriptdir_cur}
        fi
    done
}

# define option
option()
{
    if ! ${_loading_options}; then
        return
    fi
    local name=${1}
    local description=${2}
    local default=${3}
    _xmake_sh_options="${_xmake_sh_options} ${name}"
    _map_set "options" "${name}_description" "${description}"
    _map_set "options" "${name}_default" "${default}"
}
_map "options"

# is config for option
is_config()
{
    if ! ${_loading_targets}; then
        return 1
    fi
    return 0
}

# has config for option
has_config()
{
    if ! ${_loading_targets}; then
        return 1
    fi
    return 0
}

# define target
target()
{
    if ! ${_loading_targets}; then
        return
    fi
    echo "${1}" "${2}"
    return 0
}

# set kind in target
set_kind()
{
    if ! ${_loading_targets}; then
        return
    fi
    echo "set kind ${1}"
}

# add deps in target
add_deps()
{
    if ! ${_loading_targets}; then
        return
    fi
    echo "add deps ${1}"
}

# add files in target
add_files()
{
    if ! ${_loading_targets}; then
        return
    fi
    echo "add files ${1}"
}

# add defines in target
add_defines()
{
    if ! ${_loading_targets}; then
        return
    fi
    echo "add defines ${1}"
}

# find file in the given directory
# e.g. _find . xmake.sh
_find() {
    local dir=${1}
    local name=${2}
    local depth=${3}
    if is_host "macosx"; then
        echo `find ${dir} -depth ${depth} -name "${name}"`
    else
        echo `find ${dir} -maxdepth ${depth} -mindepth ${depth} -name "${name}"`
    fi
}

# load options
_load_options()
{
    _loading_options=true
    _loading_targets=false
    local file=${xmake_sh_projectdir}/xmake.sh
    if test -f "${file}"; then
        includes "${file}"
    else
        # include all xmake.sh files in next sub-directories
        local files=`find ${xmake_sh_projectdir} -maxdepth 2 -mindepth 2 -name "xmake.sh"`
        for file in ${files}; do
            includes "${file}"
        done
    fi
}
_load_options

# get the given option value
_get_option()
{
    local name=${1}
    local key=${2}
    local value=`_map_get "options" "${name}_${key}"`
    echo ${value}
}

# show option usage
_show_options_usage()
{
    for name in ${_xmake_sh_options}; do
        local description=`_get_option "${name}" "description"`
        local default=`_get_option "${name}" "default"`
        local head="--${name}=`_toupper ${name}`"
        local headsize=${#head}
        local tail="${description}"
        if test "x${default}" != "x"; then
            local defval=${default}
            if test "x${defval}" = "xtrue"; then
                defval="yes"
            elif test "x${defval}" = "xfalse"; then
                defval="no"
            fi
            tail="${tail} (${defval})"
        fi
        local width=24
        local padding_width=$((${width} - ${headsize}))
        local padding=`_dupch ${padding_width} " "`
        echo "  ${head}${padding}${tail}"
    done
}

# show configure usage
_show_usage()
{
echo '
Usage: '"$0"' [<options>...]
Options: [defaults in brackets after descriptions]
Configuration:
  --help                  Print this message
  --version               Only print version information
  --verbose               Display more information

Project configuration:
'"`_show_options_usage`"'

Directory and file names:
  --prefix=PREFIX         Install files in tree rooted at PREFIX
                          ['"${xmake_sh_default_prefix}"']
  --bindir=DIR            Install binaries in PREFIX/DIR
                          ['"${xmake_sh_default_bindir}"']
'
  exit 10
}

# show xmake.sh version
_show_version()
{
    echo "xmake.sh v${xmake_sh_version}, A script-only build utility like autotools"
    echo "${xmake_sh_copyright}"
    echo ""
}

# parse input arguments
while test $# != 0; do
    case "$1" in
    --help) _show_usage ;;
    --version) _show_version ; exit 2 ;;
    --) shift; break ;;
    *) _die "Unknown option: $1" ;;
    esac
    shift
done

# load targets
_load_targets()
{
    _loading_options=false
    _loading_targets=true
    local file=${xmake_sh_projectdir}/xmake.sh
    if test -f "${file}"; then
        includes "${file}"
    else
        # include all xmake.sh files in next sub-directories
        local files=`_find "${xmake_sh_projectdir}" "xmake.sh" 2`
        for file in ${files}; do
            includes "${file}"
        done
    fi
}
_load_targets

